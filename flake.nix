# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.25)
{
  # A helpful description of your flake
  description = "Productive Emacs config";

  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1.*";
    treefmt-nix = {
      url = "github:numtide/treefmt-nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nmt = {
      url = "sourcehut:~rycee/nmt";
      flake = false;
    };
  };

  # Flake outputs that other flakes can use
  outputs =
    {
      self,
      flake-schemas,
      nixpkgs,
      treefmt-nix,
      home-manager,
      ...
    }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [
        "x86_64-linux"
        "aarch64-darwin"
        "x86_64-darwin"
        "aarch64-linux"
      ];
      forEachSupportedSystem =
        f:
        nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import nixpkgs { inherit system; };
          }
        );

      treeconfig = {
        projectRootFile = "flake.nix";
        programs = {
          nixfmt.enable = true;
          yamlfmt.enable = true;
          actionlint.enable = true;
          deadnix.enable = true;
          statix.enable = true;
        };
      };
      treefmtEval = forEachSupportedSystem ({ pkgs }: treefmt-nix.lib.evalModule pkgs treeconfig);
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      inherit (flake-schemas) schemas;
      packages = forEachSupportedSystem (
        { pkgs, ... }:
        rec {
          default = emacs;
          emacs = pkgs.callPackage ./default.nix { };
          config = pkgs.callPackage ./config.nix { };

        }
      );
      formatter = forEachSupportedSystem ({ pkgs }: treefmtEval.${pkgs.system}.config.build.wrapper);

      homeModules.default = ./module.nix;

      overlays.default = final: _prev: {
        jotain = final.callPackage ./default.nix { };
        jotain-config = final.callPackage ./config.nix { };
      };

      checks = forEachSupportedSystem (
        { pkgs }:
        let
          emacsPackage = pkgs.callPackage ./default.nix { };
          nmtTests = import ./nmt-tests {
            inherit pkgs home-manager;
            homeModule = self.homeModules.default;
            inherit emacsPackage;
          };
          runtimeTests = import ./nmt-tests/runtime.nix {
            inherit pkgs home-manager;
            homeModule = self.homeModules.default;
            inherit emacsPackage;
          };
        in
        {
          # Fast checks (run by default)
          # ===========================

          # Formatting check
          formatting = treefmtEval.${pkgs.system}.config.build.check self;

          # Fast binary smoke test - just checks binary exists and starts
          binary-smoke-test = pkgs.runCommand "emacs-binary-smoke-test" { } ''
            # Test 1: Emacs binary exists and is executable
            test -x ${self.packages.${pkgs.system}.emacs}/bin/emacs
            echo "PASS: Emacs binary is executable"

            # Test 2: Emacs starts without errors
            ${self.packages.${pkgs.system}.emacs}/bin/emacs --batch --eval '(message "Smoke test: OK")'
            echo "PASS: Emacs starts successfully"

            touch $out
          '';

          # ERT test tiers (from fastest to slowest)
          smoke-tests = emacsPackage.passthru.smoke-test; # < 1 second
          inherit (emacsPackage.passthru) fast-tests; # < 5 seconds
          emacs-tests = emacsPackage.passthru.tests; # Full suite
        }
        // nmtTests
        # Runtime tests available separately via:
        # nix build .#checks.<system>.test-emacs-runtime
        # CI runs them automatically when CI env var is set
        // (pkgs.lib.optionalAttrs (builtins.getEnv "CI" != "") runtimeTests)
      );

      # Development environments
      devShells = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.mkShell {
            # Pinned packages available in the environment
            packages = with pkgs; [
              nixpkgs-fmt
              just
              deadnix
              statix
              git
              (pkgs.callPackage ./default.nix { })
            ];

            shellHook = ''
              # Create isolated development environment
              export DEV_HOME="$PWD/.dev-home"
              mkdir -p "$DEV_HOME"/{.config,.cache,.local/share}

              # Isolate Emacs from user's home directory
              export HOME="$DEV_HOME"
              export XDG_CONFIG_HOME="$DEV_HOME/.config"
              export XDG_CACHE_HOME="$DEV_HOME/.cache"
              export XDG_DATA_HOME="$DEV_HOME/.local/share"

              echo "Emacs Development Environment (ISOLATED)"
              echo "========================================"
              echo "üîí Isolated environment active!"
              echo "   HOME: $HOME"
              echo "   Your personal Emacs config is protected"
              echo ""
              echo "Available commands:"
              echo "  just           - Show all available commands"
              echo "  just test      - Run ERT tests"
              echo "  just test-nmt  - Run NMT tests"
              echo "  just build     - Build Emacs package"
              echo "  just check     - Quick syntax check"
              echo ""
              echo "Code quality tools:"
              echo "  nix fmt        - Format and check Nix files"
              echo "  deadnix .      - Find dead Nix code"
              echo "  statix check . - Find Nix anti-patterns"
              echo ""
              echo "‚ö†Ô∏è  Note: This shell uses isolated HOME directory"
              echo "   Changes won't affect your personal Emacs setup"
            '';
          };
        }
      );
    };
}
