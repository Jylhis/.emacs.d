# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.25)
{
  # A helpful description of your flake
  description = "Productive Emacs config";

  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1.*";
    treefmt-nix = {
      url = "github:numtide/treefmt-nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nmt = {
      url = "sourcehut:~rycee/nmt";
      flake = false;
    };
  };

  # Flake outputs that other flakes can use
  outputs =
    {
      self,
      flake-schemas,
      nixpkgs,
      treefmt-nix,
      home-manager,
      nmt,
    }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [
        "x86_64-linux"
        "aarch64-darwin"
        "x86_64-darwin"
        "aarch64-linux"
      ];
      forEachSupportedSystem =
        f:
        nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import nixpkgs { inherit system; };
          }
        );

      treeconfig = {
        projectRootFile = "flake.nix";
        programs = {
          nixfmt.enable = true;
        };
      };
      treefmtEval = forEachSupportedSystem ({ pkgs }: treefmt-nix.lib.evalModule pkgs treeconfig);
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;
      packages = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.callPackage ./default.nix { };
        }
      );
      formatter = forEachSupportedSystem ({ pkgs }: treefmtEval.${pkgs.system}.config.build.wrapper);

      homeModules.default = ./module.nix;

      checks = forEachSupportedSystem (
        { pkgs }:
        let
          nmtTests = import ./nmt-tests {
            inherit pkgs home-manager nmt;
            homeModule = self.homeModules.default;
          };
        in
        {
          formatting = treefmtEval.${pkgs.system}.config.build.check self;
          emacs-tests = (pkgs.callPackage ./default.nix { }).passthru.tests;
        }
        // nmtTests
      );

      # Development environments
      devShells = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.mkShell {
            # Pinned packages available in the environment
            packages = with pkgs; [
              nixpkgs-fmt
            ];
          };
        }
      );
    };
}
